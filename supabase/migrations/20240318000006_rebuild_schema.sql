-- First drop existing functions
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.authorize(app_permission) CASCADE;
DROP FUNCTION IF EXISTS public.custom_access_token_hook(jsonb) CASCADE;
DROP FUNCTION IF EXISTS public.create_user(text) CASCADE;

-- First drop all existing tables
DROP TABLE IF EXISTS public.direct_messages CASCADE;
DROP TABLE IF EXISTS public.direct_message_members CASCADE;
DROP TABLE IF EXISTS public.direct_message_channels CASCADE;
DROP TABLE IF EXISTS public.messages CASCADE;
DROP TABLE IF EXISTS public.channels CASCADE;
DROP TABLE IF EXISTS public.user_roles CASCADE;
DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP TABLE IF EXISTS public.users CASCADE;

-- Drop existing types
DROP TYPE IF EXISTS public.app_permission CASCADE;
DROP TYPE IF EXISTS public.app_role CASCADE;
DROP TYPE IF EXISTS public.user_status CASCADE;

-- Create custom types
CREATE TYPE public.app_permission AS ENUM ('channels.delete', 'messages.delete');
CREATE TYPE public.app_role AS ENUM ('admin', 'moderator');
CREATE TYPE public.user_status AS ENUM ('ONLINE', 'OFFLINE');

-- Create users table (renamed from profiles to match the schema)
CREATE TABLE public.users (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  username TEXT,
  status user_status DEFAULT 'OFFLINE'::public.user_status,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create channels table
CREATE TABLE public.channels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  slug TEXT NOT NULL UNIQUE,
  created_by UUID REFERENCES public.users NOT NULL
);

-- Create messages table
CREATE TABLE public.messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  message TEXT,
  user_id UUID REFERENCES public.users NOT NULL,
  channel_id BIGINT REFERENCES public.channels ON DELETE CASCADE NOT NULL
);

-- Create user roles table
CREATE TABLE public.user_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES public.users ON DELETE CASCADE NOT NULL,
  role app_role NOT NULL,
  UNIQUE (user_id, role)
);

-- Create role permissions table
CREATE TABLE public.role_permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  UNIQUE (role, permission)
);

-- Add our DM tables
CREATE TABLE public.direct_message_channels (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE public.direct_message_members (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  channel_id UUID NOT NULL REFERENCES public.direct_message_channels(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  profile_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  last_read_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(channel_id, user_id)
);

CREATE TABLE public.direct_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  channel_id UUID NOT NULL REFERENCES public.direct_message_channels(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  profile_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_direct_messages_channel_id ON public.direct_messages(channel_id);
CREATE INDEX idx_direct_messages_user_id ON public.direct_messages(user_id);
CREATE INDEX idx_direct_messages_profile_id ON public.direct_messages(profile_id);
CREATE INDEX idx_direct_message_members_channel_id ON public.direct_message_members(channel_id);
CREATE INDEX idx_direct_message_members_user_id ON public.direct_message_members(user_id);
CREATE INDEX idx_direct_message_members_profile_id ON public.direct_message_members(profile_id);

-- Rest of the schema (functions, policies, etc.) from full-schema.sql... 